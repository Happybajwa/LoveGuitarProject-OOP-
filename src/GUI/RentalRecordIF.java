/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Data.DataStore;
import EmployeeAndCustomerManagement.Customer;
import RentalRecordManagement.RentalRecord;
import Stockmanagement.Product;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author happy
 */
public class RentalRecordIF extends javax.swing.JInternalFrame {
Customer customer=null;
Product product = null;

ArrayList<Product> rentalProducts = new ArrayList<>();

ArrayList<Product> returnProducts = new ArrayList<>();

    /**
     * Creates new form RentalRecordIF
     */
    public RentalRecordIF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        RentalPanel = new javax.swing.JPanel();
        returnRadioButton = new javax.swing.JRadioButton();
        rentradioButton = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerRecordTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        CustomerNameTextField = new javax.swing.JTextField();
        totalRentTextField = new javax.swing.JTextField();
        customerRentalHistoryLable = new javax.swing.JLabel();
        phoneTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        returnItemDatePicker = new org.jdesktop.swingx.JXDatePicker();
        submitButton = new javax.swing.JButton();
        idTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ProductIdTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        SearchProductButton = new javax.swing.JButton();
        SearchCustomerButton = new javax.swing.JButton();
        dateOfBirthTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productListTable = new javax.swing.JTable();
        clearButton = new javax.swing.JButton();
        showAllProductsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        RentalPanel.setBackground(new java.awt.Color(204, 204, 204));
        RentalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LoveGuitarRentalRecords", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        RentalPanel.setPreferredSize(new java.awt.Dimension(813, 705));

        returnRadioButton.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(returnRadioButton);
        returnRadioButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        returnRadioButton.setText("Return Item ");
        returnRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnRadioButtonActionPerformed(evt);
            }
        });

        rentradioButton.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(rentradioButton);
        rentradioButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rentradioButton.setSelected(true);
        rentradioButton.setText("Rent Item");
        rentradioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentradioButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Customer Name:");

        customerRecordTable.setBackground(new java.awt.Color(153, 204, 255));
        customerRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product List", "Rent Per Day", "Date", "Return Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerRecordTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Phone Number:");

        CustomerNameTextField.setEditable(false);

        totalRentTextField.setEditable(false);

        customerRentalHistoryLable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerRentalHistoryLable.setText("Currently rented Products by Customer");

        phoneTextField.setEditable(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Total rent for all items:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Select return Date:");

        returnItemDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemDatePickerActionPerformed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("CustomerID:");

        ProductIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductIdTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Product ID:");

        SearchProductButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SearchProductButton.setText("Search Product");
        SearchProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchProductButtonActionPerformed(evt);
            }
        });

        SearchCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SearchCustomerButton.setText("Search Customer");
        SearchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCustomerButtonActionPerformed(evt);
            }
        });

        dateOfBirthTextField.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Date Of Birth:");

        addressTextField.setEditable(false);
        addressTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextFieldActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Address:");

        productListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Serial No.", "RentPerDay", "Year of manuf.", "Colour"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(productListTable);
        if (productListTable.getColumnModel().getColumnCount() > 0) {
            productListTable.getColumnModel().getColumn(0).setResizable(false);
            productListTable.getColumnModel().getColumn(1).setResizable(false);
            productListTable.getColumnModel().getColumn(2).setResizable(false);
            productListTable.getColumnModel().getColumn(3).setResizable(false);
        }

        clearButton.setText("Clear table");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        showAllProductsButton.setText("Show All Products");
        showAllProductsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllProductsButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Available Products in Store");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Love Guitar Rental Management System");

        javax.swing.GroupLayout RentalPanelLayout = new javax.swing.GroupLayout(RentalPanel);
        RentalPanel.setLayout(RentalPanelLayout);
        RentalPanelLayout.setHorizontalGroup(
            RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RentalPanelLayout.createSequentialGroup()
                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RentalPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(customerRentalHistoryLable))
                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(RentalPanelLayout.createSequentialGroup()
                                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(dateOfBirthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(CustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RentalPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(RentalPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(116, 116, 116)
                                        .addComponent(SearchCustomerButton)))
                                .addGap(1, 1, 1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 57, Short.MAX_VALUE)
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RentalPanelLayout.createSequentialGroup()
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(RentalPanelLayout.createSequentialGroup()
                                        .addGap(72, 72, 72)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalRentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(RentalPanelLayout.createSequentialGroup()
                                        .addComponent(ProductIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SearchProductButton))))
                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(RentalPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RentalPanelLayout.createSequentialGroup()
                                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(82, 82, 82)
                                                .addComponent(showAllProductsButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(clearButton)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RentalPanelLayout.createSequentialGroup()
                                        .addComponent(rentradioButton)
                                        .addGap(52, 52, 52)
                                        .addComponent(returnRadioButton)
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(returnItemDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RentalPanelLayout.createSequentialGroup()
                        .addGap(367, 367, 367)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );
        RentalPanelLayout.setVerticalGroup(
            RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RentalPanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(RentalPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchCustomerButton)
                            .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(totalRentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)))
                            .addGroup(RentalPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(CustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)
                                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(dateOfBirthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(41, 41, 41)
                        .addComponent(customerRentalHistoryLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(RentalPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchProductButton))
                        .addGap(92, 92, 92)
                        .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(showAllProductsButton)
                                .addComponent(clearButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(RentalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rentradioButton)
                    .addComponent(returnRadioButton)
                    .addComponent(returnItemDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addGap(54, 54, 54))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RentalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1194, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RentalPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 851, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showAllProductsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllProductsButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)productListTable.getModel();
        Object[] rows = new Object[4];
        model.setRowCount(0);
        ArrayList<Product>productList=DataStore.getProducts();
        {for(Product p : productList)
            {
                if(p.getStatus().equals("Available"))
                { 
                    rentalProducts.clear();
                    rentalProducts.add(p);
                    rows[0]= p.getProductSerialNumber();
                    rows[1]= p.getRentPerDay();
                    rows[2]=p.getYearOfManufacturer();
                    rows[3]=p.getStatus();
                    model.addRow(rows);
                    

                }

            }
        }
    }//GEN-LAST:event_showAllProductsButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)productListTable.getModel();
        model.setRowCount(0);
        rentalProducts.clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void SearchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCustomerButtonActionPerformed
        // TODO add your handling code here:
        String id =idTextField.getText();
        customer = DataStore.SearchCustomerById(id);
        if(customer == null)
        {
            JOptionPane.showMessageDialog(this,"Customer not found");
        }else
        {
            CustomerNameTextField.setText(customer.getName());
            idTextField.setText(customer.getCustomerId());
            dateOfBirthTextField.setText(customer.getDateOfBirth());
            addressTextField.setText(customer.getAddress());
            phoneTextField.setText(customer.getPhone());
            DefaultTableModel model = (DefaultTableModel)customerRecordTable.getModel();
            model.setRowCount(0);
            ArrayList<RentalRecord> rentalrecordlist = customer.getRentalRecords();
            returnProducts.clear();
            if(rentalrecordlist.isEmpty() == false)
            {
            for(RentalRecord r : rentalrecordlist)
            {
                ArrayList<Product> plist = r.getProductList();
                for(Product p : plist)
                {
                    if(p.getStatus().equals("Rented"))
                    {
                    returnProducts.add(p);
                    Object[] rowData = new Object[4];

                    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String rentDate = df.format(r.getRentDate());
                    String returnDate = df.format(r.getReturnDate());

                    rowData[0]=p.getProductSerialNumber();
                    rowData[1]=p.getRentPerDay();
                    rowData[2]=rentDate;
                    rowData[3]=returnDate;
                    model.addRow(rowData);
                    }
                }
            }
            }
        }
    }//GEN-LAST:event_SearchCustomerButtonActionPerformed

    private void SearchProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchProductButtonActionPerformed
        // TODO add your handling code here:

        String searchProduct=ProductIdTextField.getText();
        product=DataStore.SearchProductbyProductId(searchProduct, "Available");
        
        
        if(product==null)
        {
            JOptionPane.showMessageDialog(this, "Product not found");
        }
        else
        {
            Object[] rowData = new Object[4];
            DefaultTableModel model = (DefaultTableModel)productListTable.getModel();
            if(productListTable.getRowCount()== 0)
            {                       
                                    rowData[0]=product.getProductSerialNumber();
                                    rowData[1]=product.getRentPerDay();
                                    rowData[2]=product.getYearOfManufacturer();
                                    rowData[3]=product.getStatus();
                                    model.addRow(rowData);
                                    rentalProducts.add(product);
            }
            else
            {
                          int indexs = productListTable.getRowCount();
                          boolean valuefound = false;
                          for (int i = 0; i < indexs; i++) 
                            {
                               
                                Object[] row = new Object [productListTable.getRowCount()];
                                row[i] = productListTable.getValueAt(i, 0);  
                                if(product.getProductSerialNumber().equals(row[i]))
                                {
                                    valuefound = true;
                                }
                                
                            }
                            if(valuefound == true)
                            {
                                JOptionPane.showMessageDialog(this, "Searched item already in table");
                            }
                            else
                            {
                                    rowData[0]=product.getProductSerialNumber();
                                    rowData[1]=product.getRentPerDay();
                                    rowData[2]=product.getYearOfManufacturer();
                                    rowData[3]=product.getStatus();
                                    model.addRow(rowData);
                                    rentalProducts.add(product);
                                    
                            }
                            }
            }
                         
            
    }//GEN-LAST:event_SearchProductButtonActionPerformed

    private void ProductIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductIdTextFieldActionPerformed

    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if(rentradioButton.isSelected())
        {
        if(customer == null || rentalProducts.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "please search Customer and Products to rent First");
        }
        else if(returnItemDatePicker.getDate() == null)
        {
            JOptionPane.showMessageDialog(this,"Please choose return date of the Product.");
        }

        else if(rentradioButton.isSelected() && rentalProducts.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Please search products to rent first");
        }
        else if(returnRadioButton.isSelected() && returnProducts.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Nothing to return at this stage");
        }
        else if(rentradioButton.isSelected() && rentalProducts.isEmpty() == false)
        {
            Date rentDate = new Date();
            Date returnDate = returnItemDatePicker.getDate();
            long diff =  returnDate.getTime() - rentDate.getTime();
            long difference = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
            if(difference == 0)
            {
                totalRentTextField.setText(Double.toString(product.getRentPerDay()));
                
                ArrayList<Product> templist = new ArrayList<>();
                      for(Product p: rentalProducts)
                      {
                          templist.add(p);
                      }
                
                rentalProducts.clear();
                
                for(Product p : templist)
                {
                    p.setStatus("Rented");
                    rentalProducts.add(p);
                }
                
                RentalRecord rentalrecord = new RentalRecord(rentalProducts, rentDate, returnDate);
                customer.setRentalRecord(rentalrecord);
                
                

                
                for(Product p: rentalProducts)
                {
                   DataStore.setProductStatus(p, "Rented"); 
                }           
                JOptionPane.showMessageDialog(this, "Products have been rented succussfully");
                rentalProducts.clear();
            }
            else if(difference > 0)
            {
                totalRentTextField.setText(Double.toString(product.getRentPerDay() * (difference + 2)));
                RentalRecord rentalrecord = new RentalRecord(rentalProducts, rentDate, returnDate);
                customer.setRentalRecord(rentalrecord);
                
               ArrayList<Product> templist = new ArrayList<>();
                      for(Product p: rentalProducts)
                      {
                          templist.add(p);
                      }
                
                rentalProducts.clear();
                
                for(Product p : templist)
                {
                    p.setStatus("Rented");
                    rentalProducts.add(p);
                }
                
                
                for(Product p: rentalProducts)
                {
                   DataStore.setProductStatus(p, "Rented"); 
                }           
                JOptionPane.showMessageDialog(this, "Products have been rented succussfully");
                rentalProducts.clear();

            }
            else if(difference < 0)
            {
                JOptionPane.showMessageDialog(this,"Return date cannot be in past.\n Please Select a Valid return date.");
            }
        }
        }
        else
        {
        
        if(returnProducts.isEmpty() == false)
        {
//            ArrayList<RentalRecord> list = new ArrayList<>();
            
            for(RentalRecord r: customer.getRentalRecords())
            {
//                list.add(r);
               ArrayList<Product> plist = r.getProductList();
                for(Product p : plist)
                {
                    if(p.getStatus().equals("Rented"))
                    {
                        p.setStatus("Available");
                    }
                    
                }
            }
            
//             for(RentalRecord r : list)
//            {
                           
//            }
            
        }
        }
  
    }//GEN-LAST:event_submitButtonActionPerformed

    private void returnItemDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnItemDatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnItemDatePickerActionPerformed

    private void rentradioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentradioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rentradioButtonActionPerformed

    private void returnRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnRadioButtonActionPerformed

    private void addressTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CustomerNameTextField;
    private javax.swing.JTextField ProductIdTextField;
    private javax.swing.JPanel RentalPanel;
    private javax.swing.JButton SearchCustomerButton;
    private javax.swing.JButton SearchProductButton;
    private javax.swing.JTextField addressTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearButton;
    private javax.swing.JTable customerRecordTable;
    private javax.swing.JLabel customerRentalHistoryLable;
    private javax.swing.JTextField dateOfBirthTextField;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JTable productListTable;
    private javax.swing.JRadioButton rentradioButton;
    private org.jdesktop.swingx.JXDatePicker returnItemDatePicker;
    private javax.swing.JRadioButton returnRadioButton;
    private javax.swing.JButton showAllProductsButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField totalRentTextField;
    // End of variables declaration//GEN-END:variables
}